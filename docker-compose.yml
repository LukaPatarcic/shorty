services:
  shorten-service:
    build:
      context: .
      dockerfile: ./infra/docker/Dockerfile
      args:
        SERVICE_NAME: shorten-service
    ports:
      - "3000:3000"
    volumes:
      - ./shorten-service:/app/shorten-service
      - ./shared:/app/shared
    env_file:
      - ./shorten-service/.env
    networks:
      - default
      - datadog-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/shorten/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_healthy
      datadog-agent:
        condition: service_started

  redirect-service:
    build:
      context: .
      dockerfile: ./infra/docker/Dockerfile
      args:
        SERVICE_NAME: redirect-service
    ports:
      - "3001:3001"
    volumes:
      - ./redirect-service:/app/redirect-service
      - ./shared:/app/shared
    env_file:
      - ./redirect-service/.env
    networks:
      - default
      - datadog-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/redirect/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      datadog-agent:
        condition: service_started

  analytics-service:
    build:
      context: .
      dockerfile: ./infra/docker/Dockerfile
      args:
        SERVICE_NAME: analytics-service
    ports:
      - "3002:3002"
    volumes:
      - ./analytics-service:/app/analytics-service
      - ./shared:/app/shared
    env_file:
      - ./analytics-service/.env
    networks:
      - default
      - datadog-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3002/analytics/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  shorty-www:
    build:
      context: .
      dockerfile: ./infra/docker/Dockerfile
      args:
        SERVICE_NAME: shorty-www
    ports:
      - "3003:3003"
    volumes:
      - ./shorty-www:/app/shorty-www
      - ./shared:/app/shared
    networks:
      - default
      - datadog-network
    depends_on:
      shorten-service:
        condition: service_healthy
      redirect-service:
        condition: service_healthy
      analytics-service:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=shorty
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - default
      - datadog-network
    labels:
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: "[{}]"
      com.datadoghq.ad.instances: |
        [
          {
            "host": "%%host%%",
            "port": "5432",
            "username": "postgres",
            "password": "postgres",
            "dbname": "shorty"
          }
        ]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: echo stat | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_LOG_RETENTION_HOURS=168
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl -s http://localhost:9200/_cluster/health | grep -vq ''"status":"red"''',
        ]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

  datadog-agent:
    image: gcr.io/datadoghq/agent:latest
    pid: host
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=datadoghq.eu
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE_LOGS="name:datadog-agent"
      - DD_PROCESS_AGENT_ENABLED=true
      # PostgreSQL monitoring
      - DD_POSTGRES_HOST=postgres
      - DD_POSTGRES_PORT=5432
      - DD_POSTGRES_USER=postgres
      - DD_POSTGRES_PASS=postgres
      - DD_POSTGRES_DBNAME=shorty
      - DD_ENABLE_METADATA_COLLECTION=true
      - DD_POSTGRES_CUSTOM_QUERIES=/conf.d/postgres.d/conf.yaml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./datadog/postgres.d:/conf.d/postgres.d:ro
    ports:
      - "8126:8126"
    networks:
      - datadog-network
      - default
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_started

  nginx:
    build:
      context: ./infra/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - shorten-service
      - redirect-service
      - analytics-service
      - kafka-ui
      - kibana
    networks:
      - default
      - datadog-network
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/error-pages:/usr/share/nginx/html:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  elasticsearch-data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:

networks:
  datadog-network:
    name: datadog-network
